#!/usr/bin/env python3
"""
Test de validation : v√©rification que tous les exemples concrets ont √©t√© √©limin√©s
"""

import os
import logging
from pathlib import Path
from pdf_extractor import PDFPropertyExtractor

def test_no_concrete_examples_in_code():
    """
    V√©rifie que le code ne contient plus d'exemples concrets qui peuvent contaminer
    """
    print("üß™ TEST ANTI-CONTAMINATION : V√©rification des exemples")
    print("=" * 60)
    
    # Lire le fichier principal
    with open("pdf_extractor.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # Noms concrets qui ne doivent plus appara√Ætre dans les prompts
    forbidden_names = [
        "DARTOIS", "MICHELINE", "FR√âD√âRIC", "CHRISTOPHE",
        "MARTIN", "PIERRE", "MARIE", "JEAN", "DIDIER",
        "BERNARD", "LAMBERT", "DUPONT", "DUMONT"
    ]
    
    found_issues = []
    
    for name in forbidden_names:
        # Chercher dans les prompts (lignes contenant des guillemets)
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            if name in line and ('"' in line or "'" in line or "prompt" in line.lower()):
                # V√©rifier si c'est dans un commentaire de correction (OK)
                if "‚ùå AVANT" in line or "‚úÖ APR√àS" in line or "[NOM" in line or "[PRENOM" in line:
                    continue  # C'est un commentaire explicatif, OK
                    
                found_issues.append({
                    'line': i,
                    'name': name,
                    'content': line.strip()
                })
    
    # V√©rifier que les placeholders sont pr√©sents
    required_placeholders = [
        "[NOM1]", "[NOM2]", "[PRENOM1]", "[PRENOM2]", 
        "[NOM_PROPRIETAIRE]", "[PRENOM_MULTIPLE]", "[PRENOM_SIMPLE]"
    ]
    
    missing_placeholders = []
    for placeholder in required_placeholders:
        if placeholder not in content:
            missing_placeholders.append(placeholder)
    
    # Rapport
    print(f"üîç Noms concrets recherch√©s : {len(forbidden_names)}")
    print(f"‚ùå Probl√®mes trouv√©s : {len(found_issues)}")
    print(f"üè∑Ô∏è Placeholders manquants : {len(missing_placeholders)}")
    
    if found_issues:
        print("\nüö® EXEMPLES CONCRETS ENCORE PR√âSENTS :")
        for issue in found_issues:
            print(f"  Ligne {issue['line']}: '{issue['name']}' dans: {issue['content'][:100]}...")
    
    if missing_placeholders:
        print(f"\n‚ö†Ô∏è PLACEHOLDERS MANQUANTS : {missing_placeholders}")
    
    if not found_issues and not missing_placeholders:
        print("‚úÖ PARFAIT ! Tous les exemples concrets ont √©t√© remplac√©s par des placeholders")
        return True
    else:
        print("‚ùå CORRECTION INCOMPL√àTE - Voir les probl√®mes ci-dessus")
        return False

def test_single_pdf_no_contamination():
    """
    Test un seul PDF pour v√©rifier qu'aucun nom fant√¥me n'appara√Æt
    """
    print("\nüß™ TEST PDF UNIQUE : V√©rification absence de contamination")
    print("=" * 60)
    
    # Cr√©er l'extracteur
    extractor = PDFPropertyExtractor("input", "output")
    
    # Lister les PDFs
    pdf_files = extractor.list_pdf_files()
    
    if not pdf_files:
        print("‚ùå Aucun PDF trouv√© dans input/")
        return False
    
    # Traiter le premier PDF
    pdf_file = pdf_files[0]
    print(f"üìÑ Test avec : {pdf_file.name}")
    
    try:
        properties = extractor.process_like_make(pdf_file)
        
        if not properties:
            print("‚ö†Ô∏è Aucune propri√©t√© extraite")
            return True  # Pas de contamination si rien extrait
        
        # V√©rifier absence de noms fant√¥mes
        contaminated_names = []
        forbidden_names = [
            "DARTOIS", "MICHELINE", "FR√âD√âRIC", "CHRISTOPHE",
            "MARTIN", "PIERRE", "MARIE", "DIDIER", "BERNARD"
        ]
        
        for prop in properties:
            nom = str(prop.get('nom', '')).upper()
            prenom = str(prop.get('prenom', '')).upper()
            
            for forbidden in forbidden_names:
                if forbidden in nom or forbidden in prenom:
                    contaminated_names.append({
                        'nom': nom,
                        'prenom': prenom,
                        'forbidden': forbidden
                    })
        
        # Rapport
        print(f"üìä Propri√©t√©s extraites : {len(properties)}")
        print(f"üö® Contaminations d√©tect√©es : {len(contaminated_names)}")
        
        if contaminated_names:
            print("\n‚ùå NOMS FANT√îMES D√âTECT√âS :")
            for contamination in contaminated_names:
                print(f"  - {contamination['nom']} {contamination['prenom']} (contient '{contamination['forbidden']}')")
            return False
        else:
            print("‚úÖ AUCUNE CONTAMINATION ! Tous les noms semblent l√©gitimes")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        return False

def main():
    """Test principal"""
    print("üöÄ VALIDATION CORRECTION ANTI-CONTAMINATION")
    print("=" * 80)
    
    # Test 1: Code source
    code_ok = test_no_concrete_examples_in_code()
    
    # Test 2: PDF unique  
    pdf_ok = test_single_pdf_no_contamination()
    
    # R√©sultat final
    print("\n" + "=" * 80)
    if code_ok and pdf_ok:
        print("üéâ CORRECTION R√âUSSIE ! Anti-contamination op√©rationnelle")
        print("‚úÖ Code source : Placeholders g√©n√©riques install√©s")
        print("‚úÖ Test PDF : Aucune contamination d√©tect√©e")
    else:
        print("üö® CORRECTION INCOMPL√àTE - Actions requises :")
        if not code_ok:
            print("‚ùå Code source : Encore des exemples concrets")
        if not pdf_ok:
            print("‚ùå Test PDF : Contamination d√©tect√©e")

if __name__ == "__main__":
    main()