#!/usr/bin/env python3
"""
Test pour v√©rifier la s√©paration automatique des pr√©fixes coll√©s.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pdf_extractor import PDFPropertyExtractor

def test_prefix_separation():
    """Teste la s√©paration automatique des pr√©fixes coll√©s."""
    
    print("üîç TEST DE S√âPARATION AUTOMATIQUE DES PR√âFIXES")
    print("=" * 60)
    
    extractor = PDFPropertyExtractor()
    
    # Cas de test avec pr√©fixes coll√©s
    test_properties = [
        # Cas 1: Pr√©fixe num√©rique simple coll√© (302A)
        {
            'department': '25',
            'commune': '424',
            'prefixe': '',  # Vide pour l'instant
            'section': '302A',  # Pr√©fixe coll√©
            'numero': '90',
            'nom': 'COMMUNE',
            'prenom': 'COM COM'
        },
        # Cas 2: Pr√©fixe num√©rique double coll√© (302AB)
        {
            'department': '25',
            'commune': '424', 
            'prefixe': '',  # Vide pour l'instant
            'section': '302AB',  # Pr√©fixe coll√©
            'numero': '2',
            'nom': 'COMMUNE',
            'prenom': 'COM COM'
        },
        # Cas 3: Pr√©fixe avec z√©ros (001ZD)
        {
            'department': '51',
            'commune': '179',
            'prefixe': '',  # Vide pour l'instant
            'section': '001ZD',  # Pr√©fixe coll√©
            'numero': '5',
            'nom': 'LAMBIN',
            'prenom': 'DIDIER'
        },
        # Cas 4: Section normale sans pr√©fixe (A)
        {
            'department': '25',
            'commune': '227',
            'prefixe': '',
            'section': 'A',  # Pas de pr√©fixe coll√©
            'numero': '123',
            'nom': 'MARTIN',
            'prenom': 'PIERRE'
        },
        # Cas 5: Pr√©fixe d√©j√† pr√©sent (ne pas toucher)
        {
            'department': '25',
            'commune': '227',
            'prefixe': 'ZY',  # D√©j√† pr√©sent
            'section': '000ZD',  # Ne pas toucher
            'numero': '5',
            'nom': 'DUPONT',
            'prenom': 'MARIE'
        }
    ]
    
    print("üìã DONN√âES DE TEST AVANT S√âPARATION:")
    for i, prop in enumerate(test_properties):
        print(f"   {i+1}. Section='{prop['section']}' Pr√©fixe='{prop['prefixe']}'")
    
    # Appliquer la s√©paration automatique
    result_properties = extractor.separate_stuck_prefixes(test_properties)
    
    print("\nüìä R√âSULTATS APR√àS S√âPARATION:")
    success_count = 0
    
    expected_results = [
        {'prefixe': '302', 'section': 'A'},  # Cas 1
        {'prefixe': '302', 'section': 'AB'}, # Cas 2  
        {'prefixe': '001', 'section': 'ZD'}, # Cas 3
        {'prefixe': '', 'section': 'A'},     # Cas 4 (inchang√©)
        {'prefixe': 'ZY', 'section': '000ZD'} # Cas 5 (inchang√©)
    ]
    
    for i, (result, expected) in enumerate(zip(result_properties, expected_results)):
        prefixe = result.get('prefixe', '')
        section = result.get('section', '')
        expected_prefixe = expected['prefixe']
        expected_section = expected['section']
        
        status = "‚úÖ" if (prefixe == expected_prefixe and section == expected_section) else "‚ùå"
        
        if status == "‚úÖ":
            success_count += 1
            
        print(f"   {status} Cas {i+1}: Section='{section}' Pr√©fixe='{prefixe}' (attendu: '{expected_section}'/'{expected_prefixe}')")
    
    print(f"\nüìä R√âSULTAT GLOBAL: {success_count}/{len(expected_results)} cas r√©ussis")
    
    if success_count == len(expected_results):
        print("üéâ ‚úÖ S√âPARATION AUTOMATIQUE FONCTIONNE PARFAITEMENT !")
        return True
    else:
        print("‚ö†Ô∏è ‚ùå Certains cas de s√©paration ont √©chou√©")
        return False

if __name__ == "__main__":
    success = test_prefix_separation()
    if success:
        print("\nüéØ CONCLUSION: Syst√®me pr√™t √† s√©parer les pr√©fixes coll√©s automatiquement ! ‚úÖ")
    else:
        print("\n‚ö†Ô∏è CONCLUSION: S√©paration automatique √Ä CORRIGER ‚ùå")