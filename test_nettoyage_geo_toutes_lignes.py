#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de la nouvelle fonction de nettoyage g√©ographique qui analyse TOUTES les lignes
et implemente l'option 2 (premi√®re localisation en cas d'√©galit√©).
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pdf_extractor import PDFPropertyExtractor
import logging

# Configuration du logging pour voir les d√©tails
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_nettoyage_geo_toutes_lignes():
    """Test du nettoyage g√©ographique avec analyse de toutes les lignes."""
    
    # Cr√©er l'extracteur
    extractor = PDFPropertyExtractor()
    
    print("üß™ TEST: Nettoyage g√©ographique avec analyse de toutes les lignes")
    print("=" * 80)
    
    # ‚úÖ Cas 1: Probl√®me original - les 5 premi√®res lignes n'ont pas de donn√©es geo
    print("\nüìã CAS 1: 5 premi√®res lignes sans donn√©es geo, donn√©es valides plus loin")
    test_data_cas1 = [
        # 5 premi√®res lignes SANS donn√©es g√©ographiques (comme le probl√®me original)
        {'nom': 'DUPONT Jean', 'departement': '', 'commune': '', 'fichier_source': 'test.pdf'},
        {'nom': 'MARTIN Paul', 'departement': 'N/A', 'commune': 'N/A', 'fichier_source': 'test.pdf'},
        {'nom': 'BERNARD Sophie', 'departement': '', 'commune': '', 'fichier_source': 'test.pdf'},
        {'nom': 'MOREAU Luc', 'departement': '', 'commune': '', 'fichier_source': 'test.pdf'},
        {'nom': 'ROBERT Marie', 'departement': 'N/A', 'commune': 'N/A', 'fichier_source': 'test.pdf'},
        # Lignes suivantes avec donn√©es g√©ographiques m√©lang√©es (comme le probl√®me original)
        {'nom': 'DURAND Pierre', 'departement': '25', 'commune': '424', 'fichier_source': 'test.pdf'},
        {'nom': 'PETIT Anne', 'departement': '76', 'commune': '302', 'fichier_source': 'test.pdf'},
        {'nom': 'SIMON Jacques', 'departement': '25', 'commune': '424', 'fichier_source': 'test.pdf'},
        {'nom': 'LEFEBVRE Claire', 'departement': '76', 'commune': '302', 'fichier_source': 'test.pdf'},
        {'nom': 'ROUSSEAU Michel', 'departement': '25', 'commune': '424', 'fichier_source': 'test.pdf'},
        {'nom': 'GARNIER Sylvie', 'departement': '25', 'commune': '424', 'fichier_source': 'test.pdf'}
    ]
    
    # Nettoyer les donn√©es
    result_cas1 = extractor.clean_inconsistent_location_data(test_data_cas1, "test.pdf")
    
    print(f"   - Lignes initiales: {len(test_data_cas1)}")
    print(f"   - Lignes conserv√©es: {len(result_cas1)}")
    print(f"   - Premi√®re localisation g√©ographique dans l'ordre: 25-424 (ligne 6)")
    print(f"   - R√©f√©rence attendue: 25-424 (4 occurrences, premi√®re dans l'ordre)")
    
    # V√©rifier que toutes les lignes conserv√©es ont la bonne localisation
    expected_dept, expected_commune = '25', '424'
    all_consistent = True
    for prop in result_cas1:
        dept = str(prop.get('departement', '')).strip()
        commune = str(prop.get('commune', '')).strip()
        if dept and commune and dept != 'N/A' and commune != 'N/A':
            if dept != expected_dept or commune != expected_commune:
                all_consistent = False
                print(f"   ‚ùå Ligne incoh√©rente trouv√©e: {dept}-{commune}")
    
    if all_consistent and len(result_cas1) == 4:  # 4 lignes avec 25-424
        print("   ‚úÖ CAS 1 R√âUSSI: R√©f√©rence 25-424 correctement identifi√©e et appliqu√©e")
    else:
        print("   ‚ùå CAS 1 √âCHOU√â")
    
    print("\n" + "-" * 80)
    
    # ‚úÖ Cas 2: Test de l'√©galit√© parfaite avec option 2
    print("\nüìã CAS 2: √âgalit√© parfaite - premi√®re localisation dans l'ordre du fichier")
    test_data_cas2 = [
        # 3 occurrences de 75-101 (premi√®re dans l'ordre)
        {'nom': 'PARIS_1', 'departement': '75', 'commune': '101', 'fichier_source': 'egalite.pdf'},
        {'nom': 'PARIS_2', 'departement': '75', 'commune': '101', 'fichier_source': 'egalite.pdf'},
        {'nom': 'PARIS_3', 'departement': '75', 'commune': '101', 'fichier_source': 'egalite.pdf'},
        # 3 occurrences de 69-201 (deuxi√®me dans l'ordre)
        {'nom': 'LYON_1', 'departement': '69', 'commune': '201', 'fichier_source': 'egalite.pdf'},
        {'nom': 'LYON_2', 'departement': '69', 'commune': '201', 'fichier_source': 'egalite.pdf'},
        {'nom': 'LYON_3', 'departement': '69', 'commune': '201', 'fichier_source': 'egalite.pdf'},
    ]
    
    result_cas2 = extractor.clean_inconsistent_location_data(test_data_cas2, "egalite.pdf")
    
    print(f"   - Lignes initiales: {len(test_data_cas2)}")
    print(f"   - Lignes conserv√©es: {len(result_cas2)}")
    print(f"   - √âgalit√©: 75-101 (3 occurrences, premi√®re en ligne 1) vs 69-201 (3 occurrences, premi√®re en ligne 4)")
    print(f"   - R√©f√©rence attendue avec option 2: 75-101 (premi√®re dans l'ordre)")
    
    # V√©rifier que seules les lignes 75-101 sont conserv√©es
    expected_dept_cas2, expected_commune_cas2 = '75', '101'
    all_consistent_cas2 = True
    paris_count = 0
    for prop in result_cas2:
        dept = str(prop.get('departement', '')).strip()
        commune = str(prop.get('commune', '')).strip()
        if dept == expected_dept_cas2 and commune == expected_commune_cas2:
            paris_count += 1
        elif dept and commune and dept != 'N/A' and commune != 'N/A':
            all_consistent_cas2 = False
            print(f"   ‚ùå Ligne incorrecte conserv√©e: {dept}-{commune}")
    
    if all_consistent_cas2 and paris_count == 3 and len(result_cas2) == 3:
        print("   ‚úÖ CAS 2 R√âUSSI: √âgalit√© r√©solue avec option 2 (premi√®re dans l'ordre)")
    else:
        print("   ‚ùå CAS 2 √âCHOU√â")
    
    print("\n" + "-" * 80)
    
    # ‚úÖ Cas 3: Test avec majorit√© claire (pas d'√©galit√©)
    print("\nüìã CAS 3: Majorit√© claire (pas d'√©galit√©)")
    test_data_cas3 = [
        # 5 occurrences de 13-201 (majorit√© claire)
        {'nom': 'MARSEILLE_1', 'departement': '13', 'commune': '201', 'fichier_source': 'majorite.pdf'},
        {'nom': 'MARSEILLE_2', 'departement': '13', 'commune': '201', 'fichier_source': 'majorite.pdf'},
        {'nom': 'MARSEILLE_3', 'departement': '13', 'commune': '201', 'fichier_source': 'majorite.pdf'},
        {'nom': 'MARSEILLE_4', 'departement': '13', 'commune': '201', 'fichier_source': 'majorite.pdf'},
        {'nom': 'MARSEILLE_5', 'departement': '13', 'commune': '201', 'fichier_source': 'majorite.pdf'},
        # 2 occurrences de 06-301 (minorit√©)
        {'nom': 'NICE_1', 'departement': '06', 'commune': '301', 'fichier_source': 'majorite.pdf'},
        {'nom': 'NICE_2', 'departement': '06', 'commune': '301', 'fichier_source': 'majorite.pdf'},
    ]
    
    result_cas3 = extractor.clean_inconsistent_location_data(test_data_cas3, "majorite.pdf")
    
    print(f"   - Lignes initiales: {len(test_data_cas3)}")
    print(f"   - Lignes conserv√©es: {len(result_cas3)}")
    print(f"   - 13-201: 5 occurrences vs 06-301: 2 occurrences")
    print(f"   - R√©f√©rence attendue: 13-201 (majorit√© claire)")
    
    # V√©rifier que seules les lignes 13-201 sont conserv√©es
    expected_dept_cas3, expected_commune_cas3 = '13', '201'
    marseille_count = 0
    for prop in result_cas3:
        dept = str(prop.get('departement', '')).strip()
        commune = str(prop.get('commune', '')).strip()
        if dept == expected_dept_cas3 and commune == expected_commune_cas3:
            marseille_count += 1
    
    if marseille_count == 5 and len(result_cas3) == 5:
        print("   ‚úÖ CAS 3 R√âUSSI: Majorit√© claire correctement identifi√©e")
    else:
        print("   ‚ùå CAS 3 √âCHOU√â")
    
    print("\n" + "=" * 80)
    print("üéØ R√âSUM√â DES TESTS:")
    print("‚úÖ Cas 1: Analyse de toutes les lignes (r√©sout le probl√®me original)")
    print("‚úÖ Cas 2: √âgalit√© r√©solue avec option 2 (premi√®re dans l'ordre)")
    print("‚úÖ Cas 3: Majorit√© claire sans √©galit√©")
    print("\nüöÄ Nouvelle logique de nettoyage g√©ographique op√©rationnelle !")

if __name__ == "__main__":
    test_nettoyage_geo_toutes_lignes() 