#!/usr/bin/env python3
"""
Script d'extraction automatique d'informations de propri√©taires depuis des PDFs.

Auteur: Assistant IA
Date: 2025
"""

import os
import json
import logging
import base64
from pathlib import Path
from typing import List, Dict, Optional
import fitz  # PyMuPDF
import pandas as pd
from openai import OpenAI
from dotenv import load_dotenv
from PIL import Image
import io

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('extraction.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PDFPropertyExtractor:
    """Classe principale pour l'extraction d'informations de propri√©taires depuis des PDFs."""
    
    def __init__(self, input_dir: str = "input", output_dir: str = "output"):
        """
        Initialise l'extracteur.
        
        Args:
            input_dir: Dossier contenant les PDFs
            output_dir: Dossier de sortie pour les r√©sultats
        """
        # Charger les variables d'environnement
        load_dotenv()
        
        # R√©cup√©rer la cl√© API depuis les variables d'environnement
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("La cl√© API OpenAI n'est pas configur√©e. Veuillez d√©finir OPENAI_API_KEY dans le fichier .env")
        
        self.client = OpenAI(api_key=api_key)
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.default_section = os.getenv('DEFAULT_SECTION', 'A')
        self.default_plan_number = int(os.getenv('DEFAULT_PLAN_NUMBER', '123'))
        
        # Cr√©er les dossiers s'ils n'existent pas
        self.input_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
        
        logger.info(f"Extracteur initialis√© - Input: {self.input_dir}, Output: {self.output_dir}")

    def list_pdf_files(self) -> List[Path]:
        """
        Liste tous les fichiers PDF dans le dossier input.
        
        Returns:
            Liste des chemins vers les fichiers PDF
        """
        pdf_files = list(self.input_dir.glob("*.pdf"))
        logger.info(f"Trouv√© {len(pdf_files)} fichier(s) PDF dans {self.input_dir}")
        return pdf_files

    def pdf_to_images(self, pdf_path: Path) -> List[bytes]:
        """
        Convertit toutes les pages d'un PDF en images PNG.
        
        Args:
            pdf_path: Chemin vers le fichier PDF
            
        Returns:
            Liste des bytes des images PNG ou liste vide en cas d'erreur
        """
        try:
            logger.info(f"Conversion de toutes les pages de {pdf_path.name} en images")
            
            # Ouvrir le PDF
            doc = fitz.open(pdf_path)
            
            if len(doc) == 0:
                logger.error(f"Le PDF {pdf_path.name} est vide")
                return []
            
            images = []
            
            # Traiter chaque page
            for page_num in range(len(doc)):
                try:
                    page = doc[page_num]
                    
                    # Convertir chaque page en image avec une r√©solution MAXIMALE
                    mat = fitz.Matrix(5.0, 5.0)  # ULTRA-HAUTE r√©solution pour extraction optimale
                    pix = page.get_pixmap(matrix=mat)
                    
                    # Convertir en PNG
                    img_data = pix.tobytes("png")
                    images.append(img_data)
                    
                    logger.info(f"Page {page_num + 1}/{len(doc)} convertie pour {pdf_path.name}")
                    
                except Exception as e:
                    logger.error(f"Erreur lors de la conversion de la page {page_num + 1} de {pdf_path.name}: {str(e)}")
                    continue
            
            doc.close()
            logger.info(f"Conversion r√©ussie pour {pdf_path.name}: {len(images)} page(s) trait√©e(s)")
            return images
            
        except Exception as e:
            logger.error(f"Erreur lors de la conversion de {pdf_path.name}: {str(e)}")
            return []

    def extract_info_with_gpt4o(self, image_data: bytes, filename: str) -> Optional[Dict]:
        """
        EXTRACTION ULTRA-OPTIMIS√âE pour extraire TOUTES les informations possibles.
        
        Args:
            image_data: Donn√©es de l'image en bytes
            filename: Nom du fichier pour le logging
            
        Returns:
            Dictionnaire contenant les informations extraites ou None en cas d'erreur
        """
        try:
            logger.info(f"üîç Extraction ADAPTATIVE pour {filename}")
            
            # PHASE 1: D√âTECTION AUTOMATIQUE du format PDF
            format_info = self.detect_pdf_format(image_data)
            logger.info(f"üìä Format: {format_info.get('document_type')} | √âpoque: {format_info.get('format_era')} | Layout: {format_info.get('layout')}")
            
            # Encoder l'image en base64
            base64_image = base64.b64encode(image_data).decode('utf-8')
            
            # PHASE 2: PROMPT ADAPTATIF selon le format d√©tect√©
            adapted_prompt = self.adapt_extraction_prompt(format_info)
            
            # PROMPT ADAPTATIF remplace l'ancien prompt fixe
            # (L'ancien prompt ultra-d√©taill√© est maintenant dans adapt_extraction_prompt)
            logger.info(f"üéØ Utilisation strat√©gie: {format_info.get('extraction_strategy')}")
            
            # Fallback: si la d√©tection √©choue, utiliser le prompt ultra-d√©taill√© original
            if not adapted_prompt:
                adapted_prompt = """
üéØ MISSION CRITIQUE: Tu es un expert en documents cadastraux fran√ßais. Tu DOIS extraire TOUTES les informations visibles avec une pr√©cision maximale.

üìã STRAT√âGIE D'EXTRACTION EXHAUSTIVE:

1Ô∏è‚É£ LOCALISATION (priorit√© absolue):
- Cherche en HAUT du document: codes comme "51179", "25227", "75001" 
- Format: DEPARTMENT(2 chiffres) + COMMUNE(3 chiffres)
- Exemples: "51179" = d√©partement 51, commune 179

2Ô∏è‚É£ PROPRI√âTAIRES (scan complet):
- Noms en MAJUSCULES: MARTIN, DUPONT, LAMBIN, etc.
- Pr√©noms: Jean, Marie, Didier Jean Guy, etc.
- Codes MAJIC: M8BNF6, MB43HC, P7QR92 (alphanum√©riques 6 caract√®res)

3Ô∏è‚É£ PARCELLES (d√©tection fine):
- Sections: A, AB, ZY, 000ZD, etc.
- Num√©ros: 6, 0006, 123, 0123, etc.
- Contenance: 230040, 000150, 002300 (format chiffres)

4Ô∏è‚É£ ADRESSES (lecture compl√®te):
- Voies: "1 RUE D AVAT", "15 AVENUE DE LA PAIX"
- Codes postaux: 51240, 75001, 13000
- Villes: COUPEVILLE, PARIS, MARSEILLE

5Ô∏è‚É£ DROITS R√âELS:
- PP = Pleine Propri√©t√©
- US = Usufruit  
- NU = Nue-propri√©t√©

üìä EXEMPLES CONCRETS DE DONN√âES R√âELLES:

EXEMPLE 1:
{
  "department": "51",
  "commune": "179", 
  "section": "ZY",
  "numero": "0006",
  "contenance": "230040",
  "droit_reel": "US",
  "designation_parcelle": "LES ROULLIERS",
  "nom": "LAMBIN",
  "prenom": "DIDIER JEAN GUY",
  "numero_majic": "M8BNF6",
  "voie": "1 RUE D AVAT",
  "post_code": "51240",
  "city": "COUPEVILLE"
}

EXEMPLE 2:
{
  "department": "25",
  "commune": "227",
  "section": "000ZD",
  "numero": "0005",
  "contenance": "000150",
  "droit_reel": "PP",
  "designation_parcelle": "LE GRAND CHAMP",
  "nom": "MARTIN",
  "prenom": "PIERRE",
  "numero_majic": "MB43HC",
  "voie": "15 RUE DE LA PAIX",
  "post_code": "25000",
  "city": "BESANCON"
}

üîç INSTRUCTIONS DE SCAN SYST√âMATIQUE:

1. Commence par scanner TOUT LE HAUT du document pour les codes d√©partement/commune
2. Lit TOUS les noms en majuscules (ce sont les propri√©taires)
3. Trouve TOUS les codes MAJIC (6 caract√®res alphanum√©riques)
4. R√©cup√®re TOUTES les adresses compl√®tes
5. Identifie TOUTES les sections et num√©ros de parcelles
6. Collecte TOUTES les contenances (surfaces)

‚ö†Ô∏è R√àGLES STRICTES:
- Si tu vois une information partiellement, INCLUS-LA quand m√™me
- Ne mets JAMAIS "N/A" - utilise "" si vraiment absent
- Scan CHAQUE ZONE du document m√©thodiquement
- IGNORE aucun d√©tail, m√™me petit
- Retourne TOUS les propri√©taires trouv√©s

üì§ FORMAT DE R√âPONSE OBLIGATOIRE:
{
  "proprietes": [
    {
      "department": "XX",
      "commune": "XXX",
      "prefixe": "",
      "section": "XXXX",
      "numero": "XXXX",
      "contenance": "XXXXXX",
      "droit_reel": "XX",
      "designation_parcelle": "LIEU-DIT",
      "nom": "NOM_PROPRIETAIRE",
      "prenom": "PRENOM_PROPRIETAIRE",
      "numero_majic": "XXXXXX",
      "voie": "ADRESSE_COMPLETE",
      "post_code": "XXXXX",
      "city": "VILLE"
    }
  ]
}

üéØ OBJECTIF: Z√âRO champ vide si l'info existe dans le document !
"""
            
            # PREMI√àRE PASSE: Extraction principale ultra-d√©taill√©e
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": adapted_prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=4000,
                temperature=0.0
            )
            
            # Parser la r√©ponse JSON
            response_text = response.choices[0].message.content.strip()
            
            # Nettoyer la r√©ponse
            if response_text.startswith('```json'):
                response_text = response_text[7:-3]
            elif response_text.startswith('```'):
                response_text = response_text[3:-3]
            
            try:
                main_result = json.loads(response_text)
                
                if "proprietes" in main_result and main_result["proprietes"]:
                    properties = main_result["proprietes"]
                    logger.info(f"‚úÖ Extraction principale: {len(properties)} propri√©t√©(s) pour {filename}")
                    
                    # DEUXI√àME PASSE: R√©cup√©ration des champs manquants
                    enhanced_properties = self.enhance_missing_fields(properties, base64_image, filename)
                    
                    if enhanced_properties:
                        logger.info(f"üöÄ Extraction ULTRA-OPTIMIS√âE termin√©e: {len(enhanced_properties)} propri√©t√©(s) pour {filename}")
                        return {"proprietes": enhanced_properties}
                    else:
                        return main_result
                else:
                    logger.warning(f"‚ùå Extraction principale sans r√©sultat pour {filename}")
                    # PASSE DE SECOURS: Extraction d'urgence
                    return self.emergency_extraction(base64_image, filename)
                    
            except json.JSONDecodeError as e:
                logger.error(f"Erreur JSON pour {filename}: {e}")
                logger.error(f"R√©ponse: {response_text[:500]}...")
                # PASSE DE SECOURS en cas d'erreur JSON
                return self.emergency_extraction(base64_image, filename)
                
        except Exception as e:
            logger.error(f"Erreur extraction pour {filename}: {e}")
            return None

    def enhance_missing_fields(self, properties: List[Dict], base64_image: str, filename: str) -> List[Dict]:
        """
        DEUXI√àME PASSE: Am√©lioration cibl√©e des champs manquants.
        """
        try:
            # Analyser quels champs sont manquants
            missing_fields = {}
            critical_fields = ['department', 'commune', 'nom', 'prenom', 'section', 'numero']
            
            for prop in properties:
                for field in critical_fields:
                    if not prop.get(field) or prop.get(field) == "":
                        if field not in missing_fields:
                            missing_fields[field] = 0
                        missing_fields[field] += 1
            
            if not missing_fields:
                logger.info(f"‚úÖ Tous les champs critiques pr√©sents pour {filename}")
                return properties
            
            logger.info(f"üîç R√©cup√©ration cibl√©e pour {filename}: {missing_fields}")
            
            # Prompt cibl√© pour les champs manquants les plus critiques
            if 'department' in missing_fields or 'commune' in missing_fields:
                properties = self.extract_location_info(properties, base64_image, filename)
            
            if 'nom' in missing_fields or 'prenom' in missing_fields:
                properties = self.extract_owner_info(properties, base64_image, filename)
            
            return properties
            
        except Exception as e:
            logger.error(f"Erreur enhancement pour {filename}: {e}")
            return properties

    def extract_location_info(self, properties: List[Dict], base64_image: str, filename: str) -> List[Dict]:
        """Extraction cibl√©e des informations de localisation."""
        try:
            location_prompt = """
üéØ MISSION SP√âCIALIS√âE: Trouve les codes d√©partement et commune dans ce document cadastral.

üîç RECHERCHE INTENSIVE:
- Scan le HEADER du document
- Cherche des codes √† 5 chiffres comme: 51179, 25227, 75001
- Format: 2 chiffres d√©partement + 3 chiffres commune
- Peut √™tre √©crit: 51 179, 51-179, ou 51179

Exemples typiques:
- "51179" ‚Üí d√©partement: "51", commune: "179"
- "25227" ‚Üí d√©partement: "25", commune: "227"
- "75001" ‚Üí d√©partement: "75", commune: "001"

üì§ R√âPONSE FORMAT:
{
  "location": {
    "department": "XX",
    "commune": "XXX"
  }
}

‚ö†Ô∏è CRUCIAL: Ces codes sont TOUJOURS dans l'en-t√™te du document !
"""
            
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": location_prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=500,
                temperature=0.0
            )
            
            location_text = response.choices[0].message.content.strip()
            if "```json" in location_text:
                location_text = location_text.split("```json")[1].split("```")[0].strip()
            
            location_data = json.loads(location_text)
            
            if "location" in location_data:
                dept = location_data["location"].get("department")
                commune = location_data["location"].get("commune")
                
                if dept or commune:
                    for prop in properties:
                        if not prop.get("department") and dept:
                            prop["department"] = dept
                        if not prop.get("commune") and commune:
                            prop["commune"] = commune
                    
                    logger.info(f"‚úÖ Localisation r√©cup√©r√©e: dept={dept}, commune={commune}")
            
        except Exception as e:
            logger.warning(f"Erreur extraction localisation: {e}")
        
        return properties

    def extract_owner_info(self, properties: List[Dict], base64_image: str, filename: str) -> List[Dict]:
        """Extraction cibl√©e des informations propri√©taires."""
        try:
            owner_prompt = """
üéØ MISSION: Trouve TOUS les propri√©taires dans ce document cadastral.

üîç RECHERCHE SYST√âMATIQUE:
- Noms en MAJUSCULES: MARTIN, DUPONT, LAMBIN, BERNARD, etc.
- Pr√©noms: Jean, Marie, Pierre, Didier Jean Guy, etc.
- Codes MAJIC: M8BNF6, MB43HC, P7QR92 (6 caract√®res alphanum√©riques)
- Adresses compl√®tes: "1 RUE D AVAT", "15 AVENUE DE LA PAIX"

üì§ FORMAT R√âPONSE:
{
  "owners": [
    {
      "nom": "NOM_MAJUSCULE",
      "prenom": "Pr√©nom Complet",
      "numero_majic": "XXXXXX",
      "voie": "Adresse compl√®te",
      "post_code": "XXXXX",
      "city": "VILLE"
    }
  ]
}

‚ö†Ô∏è Scan TOUT le document pour les propri√©taires !
"""
            
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": owner_prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=2000,
                temperature=0.0
            )
            
            owner_text = response.choices[0].message.content.strip()
            if "```json" in owner_text:
                owner_text = owner_text.split("```json")[1].split("```")[0].strip()
            
            owner_data = json.loads(owner_text)
            
            if "owners" in owner_data and owner_data["owners"]:
                owners = owner_data["owners"]
                
                # Fusionner avec les propri√©t√©s existantes
                for i, prop in enumerate(properties):
                    if i < len(owners):
                        owner = owners[i]
                        for field in ['nom', 'prenom', 'numero_majic', 'voie', 'post_code', 'city']:
                            if not prop.get(field) and owner.get(field):
                                prop[field] = owner[field]
                
                logger.info(f"‚úÖ Propri√©taires r√©cup√©r√©s: {len(owners)}")
        
        except Exception as e:
            logger.warning(f"Erreur extraction propri√©taires: {e}")
        
        return properties

    def emergency_extraction(self, base64_image: str, filename: str) -> Optional[Dict]:
        """
        EXTRACTION D'URGENCE: Derni√®re tentative avec prompt ultra-simple.
        """
        try:
            logger.info(f"üö® Extraction d'urgence pour {filename}")
            
            emergency_prompt = """
Regarde ce document cadastral fran√ßais et trouve:
1. Tous les NOMS en MAJUSCULES
2. Tous les codes √† 5 chiffres (d√©partement+commune)
3. Toutes les sections (lettres comme A, ZY)
4. Tous les num√©ros de parcelles

Retourne TOUT ce que tu vois en JSON:
{
  "proprietes": [
    {
      "department": "",
      "commune": "",
      "section": "",
      "numero": "",
      "nom": "",
      "prenom": "",
      "voie": "",
      "city": ""
    }
  ]
}
"""
            
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": emergency_prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=2000,
                temperature=0.1
            )
            
            emergency_text = response.choices[0].message.content.strip()
            if "```json" in emergency_text:
                emergency_text = emergency_text.split("```json")[1].split("```")[0].strip()
            
            result = json.loads(emergency_text)
            if "proprietes" in result and result["proprietes"]:
                logger.info(f"üÜò Extraction d'urgence r√©ussie: {len(result['proprietes'])} propri√©t√©(s)")
                return result
            
        except Exception as e:
            logger.error(f"√âchec extraction d'urgence pour {filename}: {e}")
        
        return None

    def generate_parcel_id(self, department: str, commune: str, section: str = None, plan_number: int = None) -> str:
        """
        G√©n√®re un identifiant parcellaire selon la formule sp√©cifi√©e.
        
        Args:
            department: Code d√©partement (2 chiffres)
            commune: Code commune (3 chiffres)
            section: Section (5 caract√®res, optionnel)
            plan_number: Num√©ro de plan (4 chiffres, optionnel)
            
        Returns:
            Identifiant parcellaire format√©
        """
        # Utiliser les valeurs par d√©faut si non fournies
        if section is None:
            section = self.default_section
        if plan_number is None:
            plan_number = self.default_plan_number
        
        # Formater selon les r√®gles
        dept_formatted = department.zfill(2)
        commune_formatted = commune.zfill(3)
        section_formatted = str(section).ljust(5, '0')[:5]
        plan_formatted = str(plan_number).zfill(4)
        
        parcel_id = f"{dept_formatted}{commune_formatted}{section_formatted}{plan_formatted}"
        return parcel_id

    def decompose_contenance(self, contenance: str) -> Dict[str, str]:
        """
        D√©compose une contenance de 7 chiffres en hectares, ares et centiares.
        
        Args:
            contenance: Cha√Æne de 7 chiffres (ex: "0130221")
            
        Returns:
            Dictionnaire avec les cl√©s HA, A, CA
        """
        if not contenance or contenance == "N/A" or len(contenance) != 7 or not contenance.isdigit():
            return {"HA": "N/A", "A": "N/A", "CA": "N/A"}
        
        # D√©composer selon le format : HHAACC
        ha = contenance[:2]  # 2 premiers chiffres (hectares)
        a = contenance[2:4]  # 2 suivants (ares)
        ca = contenance[4:7]  # 3 derniers (centiares)
        
        return {"HA": ha, "A": a, "CA": ca}

    def generate_unique_id(self, department: str, commune: str, section: str, numero: str, prefixe: str = "") -> str:
        """
        G√©n√®re un identifiant unique de 14 caract√®res selon les sp√©cifications :
        D√©partement (2) + Commune (3) + Section (5) + Num√©ro de plan (4)
        
        Args:
            department: Code d√©partement
            commune: Code commune
            section: Section cadastrale
            numero: Num√©ro de parcelle
            prefixe: Pr√©fixe optionnel (ignor√© dans cette version)
            
        Returns:
            ID unique format√© sur 14 caract√®res (ex: 25227000ZD0005)
        """
        # D√©partement : 2 chiffres
        dept = str(department).zfill(2) if department and department != "N/A" else "00"
        
        # Commune : 3 chiffres
        comm = str(commune).zfill(3) if commune and commune != "N/A" else "000"
        
        # Section : 5 caract√®res avec z√©ros √† gauche si n√©cessaire
        if section and section != "N/A":
            sect = str(section).strip()
            # Si la section fait moins de 5 caract√®res, compl√©ter avec des z√©ros √† gauche
            if len(sect) < 5:
                sect = sect.zfill(5)
            elif len(sect) > 5:
                # Si plus de 5 caract√®res, tronquer √† 5
                sect = sect[:5]
        else:
            sect = "0000A"  # Section par d√©faut
        
        # Num√©ro de plan : 4 chiffres avec z√©ros √† gauche
        if numero and numero != "N/A":
            num = str(numero).strip()
            # Enlever les caract√®res non num√©riques et prendre les chiffres
            num_clean = ''.join(filter(str.isdigit, num))
            if num_clean:
                num = num_clean.zfill(4)
                # Si plus de 4 chiffres, prendre les 4 derniers
                if len(num) > 4:
                    num = num[-4:]
            else:
                num = "0001"  # Num√©ro par d√©faut si pas de chiffres
        else:
            num = "0001"  # Num√©ro par d√©faut
        
        # Format final : DDCCCSSSSSNNNNN (14 caract√®res)
        unique_id = f"{dept}{comm}{sect}{num}"
        
        # V√©rification de la longueur
        if len(unique_id) != 14:
            logger.warning(f"ID g√©n√©r√© de longueur incorrecte ({len(unique_id)}): {unique_id}")
            # Ajuster si n√©cessaire
            if len(unique_id) < 14:
                unique_id = unique_id.ljust(14, '0')
            else:
                unique_id = unique_id[:14]
        
        return unique_id

    def process_single_pdf(self, pdf_path: Path) -> List[Dict]:
        """
        Traite un PDF MULTI-PAGES avec fusion intelligente des donn√©es.
        
        Args:
            pdf_path: Chemin vers le fichier PDF
            
        Returns:
            Liste des propri√©taires avec leurs informations fusionn√©es
        """
        logger.info(f"üîÑ Traitement MULTI-PAGES de {pdf_path.name}")
        
        # Convertir en images
        images = self.pdf_to_images(pdf_path)
        if not images:
            logger.error(f"‚ùå √âchec de la conversion en images pour {pdf_path.name}")
            return []
        
        # PHASE 1: Extraction de TOUTES les pages
        all_page_data = []
        for page_num, image_data in enumerate(images, 1):
            logger.info(f"üìÑ Extraction page {page_num}/{len(images)} pour {pdf_path.name}")
            extracted_data = self.extract_info_with_gpt4o(image_data, f"{pdf_path.name} (page {page_num})")
            if extracted_data and 'proprietes' in extracted_data:
                all_page_data.extend(extracted_data['proprietes'])
                logger.info(f"‚úÖ Page {page_num}: {len(extracted_data['proprietes'])} √©l√©ment(s) extraits")
            else:
                logger.warning(f"‚ö†Ô∏è Page {page_num}: aucune donn√©e extraite")
        
        if not all_page_data:
            logger.error(f"‚ùå Aucune donn√©e extraite de {pdf_path.name}")
            return []
        
        logger.info(f"üìä Total √©l√©ments bruts extraits: {len(all_page_data)}")
        
        # PHASE 2: FUSION INTELLIGENTE multi-pages
        merged_properties = self.smart_merge_multi_page_data(all_page_data, pdf_path.name)
        
        # PHASE 3: Finalisation avec IDs uniques
        final_properties = []
        for prop in merged_properties:
            # G√©n√©rer l'ID unique
            unique_id = self.generate_unique_id(
                department=prop.get('department', '00'),
                commune=prop.get('commune', '000'),
                section=prop.get('section', 'A'),
                numero=prop.get('numero', '0000'),
                prefixe=prop.get('prefixe', '')
            )
            
            # Ajouter l'ID unique et le fichier source
            prop['id'] = unique_id
            prop['fichier_source'] = pdf_path.name
            
            final_properties.append(prop)
        
        logger.info(f"üéâ {pdf_path.name} FUSIONN√â avec succ√®s - {len(final_properties)} propri√©t√©(s) compl√®te(s)")
        return final_properties

    def detect_pdf_format(self, image_data: bytes) -> Dict:
        """
        D√âTECTE automatiquement le type/format du PDF cadastral.
        Chaque d√©partement/commune a son propre format !
        """
        detection_prompt = """
        Tu es un expert en documents cadastraux fran√ßais. Analyse cette image et d√©termine :

        1. TYPE DE DOCUMENT :
           - Extrait cadastral (avec propri√©taires)
           - Matrice cadastrale  
           - √âtat de section
           - Plan cadastral
           - Autre

        2. FORMAT/√âPOQUE :
           - Moderne (post-2010) - tableaux structur√©s, codes MAJIC
           - Interm√©diaire (2000-2010) - semi-structur√©
           - Ancien (pr√©-2000) - format libre

        3. MISE EN PAGE :
           - Une seule page avec tout
           - Multi-pages (info dispers√©e)
           - Tableau structur√©
           - Texte libre

        4. INFORMATIONS VISIBLES :
           - D√©partement/commune en en-t√™te
           - Codes MAJIC visibles (6 chars alphanum√©riques)
           - Parcelles avec sections/num√©ros
           - Propri√©taires avec noms/pr√©noms
           - Adresses compl√®tes

        R√©ponds en JSON :
        {
            "document_type": "extrait|matrice|section|plan|autre",
            "format_era": "moderne|intermediaire|ancien", 
            "layout": "single_page|multi_page|tableau|texte_libre",
            "visible_info": {
                "location_header": true/false,
                "majic_codes": true/false,
                "parcels_listed": true/false,
                "owners_listed": true/false,
                "addresses_present": true/false
            },
            "extraction_strategy": "complete|location_focus|parcel_focus|owner_focus|mixed"
        }
        """

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": detection_prompt},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64.b64encode(image_data).decode()}"}}
                        ]
                    }
                ],
                max_tokens=500,
                temperature=0.1
            )
            
            detection_result = json.loads(response.choices[0].message.content.strip())
            logger.info(f"üîç Format d√©tect√©: {detection_result.get('document_type')} - {detection_result.get('format_era')} - Strat√©gie: {detection_result.get('extraction_strategy')}")
            return detection_result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è √âchec d√©tection format: {e}")
            # Format par d√©faut pour extraction maximale
            return {
                "document_type": "extrait",
                "format_era": "moderne", 
                "layout": "multi_page",
                "visible_info": {
                    "location_header": True,
                    "majic_codes": True,
                    "parcels_listed": True,
                    "owners_listed": True,
                    "addresses_present": True
                },
                "extraction_strategy": "complete"
            }

    def adapt_extraction_prompt(self, format_info: Dict) -> str:
        """
        ADAPTE le prompt d'extraction selon le format d√©tect√©.
        Chaque type de PDF n√©cessite une approche diff√©rente !
        """
        base_examples = """
üéØ EXEMPLES ULTRA-PR√âCIS avec TOUTES les colonnes importantes:

EXEMPLE D√âPARTEMENT 51:
{
  "department": "51",
  "commune": "179", 
  "prefixe": "",
  "section": "000ZE",
  "numero": "0025",
  "contenance": "001045",     ‚¨ÖÔ∏è CONTENANCE = SURFACE en m¬≤ (OBLIGATOIRE!)
  "droit_reel": "US",
  "designation_parcelle": "LES ROULLIERS",
  "nom": "LAMBIN",
  "prenom": "DIDIER JEAN GUY",
  "numero_majic": "M8BNF6",
  "voie": "1 RUE D AVAT",
  "post_code": "51240",
  "city": "COUPEVILLE"
}

EXEMPLE D√âPARTEMENT 25:
{
  "department": "25",
  "commune": "227",
  "prefixe": "",
  "section": "000ZD",
  "numero": "0005",
  "contenance": "000150",     ‚¨ÖÔ∏è SURFACE = 150m¬≤ (CHERCHE √ßa partout!)
  "droit_reel": "PP",
  "designation_parcelle": "LE GRAND CHAMP",
  "nom": "MARTIN",
  "prenom": "PIERRE",
  "numero_majic": "MB43HC",
  "voie": "15 RUE DE LA PAIX", 
  "post_code": "25000",
  "city": "BESANCON"
}
"""

        # Adaptations selon le format d√©tect√©
        if format_info.get('document_type') == 'matrice':
            specific_instructions = """
üéØ DOCUMENT TYPE: MATRICE CADASTRALE
- Focus sur les TABLES avec colonnes structur√©es
- Propri√©taires souvent dans colonne de droite
- Parcelles dans colonnes de gauche
- ‚≠ê CONTENANCE dans colonne "Surface" ou "Cont." ou chiffres + m¬≤
- Scan ligne par ligne m√©thodiquement
"""
        elif format_info.get('layout') == 'tableau':
            specific_instructions = """
üéØ FORMAT: TABLEAU STRUCTUR√â
- Identifie les EN-T√äTES de colonnes
- Cherche colonnes: "Surface", "Contenance", "m¬≤", "ares", "ca"
- Lit chaque LIGNE du tableau
- Associe chaque valeur √† sa colonne
- ‚≠ê CONTENANCE = valeurs num√©riques dans colonnes surface
- Attention aux cellules fusionn√©es
"""
        elif format_info.get('format_era') == 'ancien':
            specific_instructions = """
üéØ FORMAT: ANCIEN/LIBRE
- Scan TOUT le texte zone par zone
- Cherche les motifs : "NOM Pr√©nom", codes, adresses
- Les infos peuvent √™tre DISPERS√âES
- Utilise le contexte pour regrouper
"""
        else:
            specific_instructions = """
üéØ FORMAT: MODERNE/STANDARD
- Scan syst√©matique de HAUT en BAS
- En-t√™tes pour d√©partement/commune
- Propri√©taires en MAJUSCULES
- Codes MAJIC (6 caract√®res)
- ‚≠ê CONTENANCE = recherche "m¬≤", "ares", "ca" + chiffres associ√©s
- Sections format "000XX" ou "XX" + num√©ros parcelles
"""

        # Instructions sp√©cifiques selon ce qui est visible
        if not format_info.get('visible_info', {}).get('majic_codes'):
            majic_note = "‚ö†Ô∏è CODES MAJIC probablement ABSENTS - concentre-toi sur noms/adresses"
        else:
            majic_note = "üéØ CODES MAJIC PR√âSENTS - scan tous les codes 6 caract√®res"

        if format_info.get('extraction_strategy') == 'location_focus':
            strategy_note = "üéØ PRIORIT√â: D√©partement/Commune/Localisation"
        elif format_info.get('extraction_strategy') == 'owner_focus':
            strategy_note = "üéØ PRIORIT√â: Propri√©taires/Noms/Adresses/MAJIC"
        elif format_info.get('extraction_strategy') == 'parcel_focus':
            strategy_note = "üéØ PRIORIT√â: Parcelles/Sections/Num√©ros/Contenances"
        else:
            strategy_note = "üéØ EXTRACTION COMPL√àTE de TOUTES les informations"

        # Prompt adaptatif final
        adapted_prompt = f"""
Tu es un EXPERT en extraction de donn√©es cadastrales fran√ßaises. Ce document a √©t√© analys√© automatiquement.

{specific_instructions}

{strategy_note}
{majic_note}

{base_examples}

üîç INSTRUCTIONS DE SCAN ADAPTATIF ULTRA-PR√âCIS:
1. Applique la strat√©gie d√©tect√©e ci-dessus
2. Scan M√âTHODIQUEMENT selon le type de mise en page  
3. ‚≠ê CONTENANCE = SURFACE : Cherche PARTOUT les chiffres suivis de "m¬≤", "ares", "ca" (centiares)
4. ‚≠ê SECTION + NUM√âRO : Formats "000ZE", "ZE", "003", toujours ensemble
5. ‚≠ê NOMS/PR√âNOMS : MAJUSCULES = nom, minuscules = pr√©nom  
6. ‚≠ê CODES MAJIC : Exactement 6 caract√®res alphanum√©riques
7. ‚≠ê ADRESSES : Num√©ro + nom de rue + code postal + ville
8. Collecte TOUTES les informations visibles
9. Regroupe intelligemment les donn√©es dispers√©es
10. Ne laisse RIEN passer, m√™me les valeurs partielles

‚ö†Ô∏è R√àGLES STRICTES:
- ADAPTE ta lecture au format d√©tect√©
- Si info partiellement visible, INCLUS-LA
- JAMAIS de "N/A" - utilise "" si vraiment absent
- IGNORE aucun d√©tail m√™me petit
- Retourne TOUS les propri√©taires trouv√©s

üì§ FORMAT R√âPONSE:
{{
  "proprietes": [
    {{
      "department": "",
      "commune": "",
      "prefixe": "",
      "section": "",
      "numero": "",
      "contenance": "",
      "droit_reel": "",
      "designation_parcelle": "",
      "nom": "",
      "prenom": "",
      "numero_majic": "",
      "voie": "",
      "post_code": "",
      "city": ""
    }}
  ]
}}
"""
        return adapted_prompt

    def smart_merge_multi_page_data(self, all_page_data: List[Dict], filename: str) -> List[Dict]:
        """
        FUSION INTELLIGENTE des donn√©es multi-pages.
        Combine les informations dispers√©es sur plusieurs pages en propri√©t√©s compl√®tes.
        """
        logger.info(f"üß† Fusion intelligente de {len(all_page_data)} √©l√©ments pour {filename}")
        
        # S√©parer les donn√©es par type d'information
        location_data = {}  # d√©partement/commune communs
        owners_data = []    # propri√©taires avec infos compl√®tes
        parcels_data = []   # parcelles avec sections/num√©ros
        mixed_data = []     # donn√©es mixtes
        
        # PHASE 1: Classification des donn√©es extraites
        for item in all_page_data:
            has_owner = bool(item.get('nom') or item.get('prenom'))
            has_parcel = bool(item.get('section') or item.get('numero'))
            has_location = bool(item.get('department') or item.get('commune'))
            
            if has_location and not location_data:
                # Stocker les infos de localisation (d√©partement/commune)
                location_data = {
                    'department': item.get('department', ''),
                    'commune': item.get('commune', ''),
                    'post_code': item.get('post_code', ''),
                    'city': item.get('city', '')
                }
                logger.info(f"üìç Localisation trouv√©e: {location_data}")
            
            if has_owner and has_parcel:
                # Donn√©es compl√®tes
                mixed_data.append(item)
            elif has_owner:
                # Donn√©es propri√©taire uniquement
                owners_data.append(item)
            elif has_parcel:
                # Donn√©es parcelle uniquement  
                parcels_data.append(item)
        
        logger.info(f"üìã Classification: {len(mixed_data)} compl√®tes, {len(owners_data)} propri√©taires, {len(parcels_data)} parcelles")
        
        # PHASE 2: Strat√©gie de fusion selon les donn√©es disponibles
        merged_properties = []
        
        if mixed_data:
            # Cas optimal: donn√©es d√©j√† compl√®tes
            for item in mixed_data:
                # Enrichir avec les infos de localisation si manquantes
                if not item.get('department') and location_data.get('department'):
                    item['department'] = location_data['department']
                if not item.get('commune') and location_data.get('commune'):
                    item['commune'] = location_data['commune']
                if not item.get('post_code') and location_data.get('post_code'):
                    item['post_code'] = location_data['post_code']
                if not item.get('city') and location_data.get('city'):
                    item['city'] = location_data['city']
                
                merged_properties.append(item)
                
        elif owners_data and parcels_data:
            # Fusion propri√©taires + parcelles
            logger.info(f"üîó Fusion {len(owners_data)} propri√©taires avec {len(parcels_data)} parcelles")
            
            # Strat√©gie: croiser chaque propri√©taire avec chaque parcelle
            for owner in owners_data:
                for parcel in parcels_data:
                    merged_prop = self.merge_owner_parcel(owner, parcel, location_data)
                    merged_properties.append(merged_prop)
                    
        elif owners_data:
            # Seulement des propri√©taires - enrichir avec localisation
            for owner in owners_data:
                merged_prop = owner.copy()
                # Ajouter les infos de localisation
                for key, value in location_data.items():
                    if not merged_prop.get(key) and value:
                        merged_prop[key] = value
                merged_properties.append(merged_prop)
                
        elif parcels_data:
            # Seulement des parcelles - enrichir avec localisation  
            for parcel in parcels_data:
                merged_prop = parcel.copy()
                # Ajouter les infos de localisation
                for key, value in location_data.items():
                    if not merged_prop.get(key) and value:
                        merged_prop[key] = value
                merged_properties.append(merged_prop)
        
        else:
            # Cas de secours: utiliser toutes les donn√©es brutes
            merged_properties = all_page_data
        
        # PHASE 3: Nettoyage et d√©duplication
        cleaned_properties = self.clean_and_deduplicate(merged_properties, filename)
        
        logger.info(f"‚ú® Fusion termin√©e: {len(cleaned_properties)} propri√©t√©(s) finales")
        return cleaned_properties

    def merge_owner_parcel(self, owner: Dict, parcel: Dict, location: Dict) -> Dict:
        """
        Fusionne intelligemment les donn√©es propri√©taire + parcelle + localisation.
        """
        merged = {}
        
        # Priorit√© aux donn√©es propri√©taire pour les champs propri√©taire
        owner_fields = ['nom', 'prenom', 'numero_majic', 'voie', 'post_code', 'city']
        for field in owner_fields:
            merged[field] = owner.get(field, '')
        
        # Priorit√© aux donn√©es parcelle pour les champs parcelle
        parcel_fields = ['section', 'numero', 'contenance', 'droit_reel', 'designation_parcelle', 'prefixe']
        for field in parcel_fields:
            merged[field] = parcel.get(field, '')
        
        # Utiliser les donn√©es de localisation pour les champs manquants
        location_fields = ['department', 'commune', 'post_code', 'city']
        for field in location_fields:
            if not merged.get(field) and location.get(field):
                merged[field] = location[field]
        
        # Si encore des champs manquants, essayer de les r√©cup√©rer de l'autre source
        for field in ['department', 'commune']:
            if not merged.get(field):
                merged[field] = owner.get(field, parcel.get(field, ''))
        
        return merged

    def clean_and_deduplicate(self, properties: List[Dict], filename: str) -> List[Dict]:
        """
        Nettoie et d√©duplique les propri√©t√©s fusionn√©es.
        """
        if not properties:
            return []
        
        cleaned = []
        seen_combinations = set()
        
        for prop in properties:
            # Cr√©er une cl√© unique bas√©e sur les champs critiques
            key_fields = [
                prop.get('nom', ''),
                prop.get('prenom', ''),
                prop.get('section', ''),
                prop.get('numero', ''),
                prop.get('numero_majic', '')
            ]
            unique_key = '|'.join(str(f).strip() for f in key_fields)
            
            # Ignorer les entr√©es compl√®tement vides
            if not any(key_fields) or unique_key == '||||':
                continue
            
            # D√©duplication
            if unique_key not in seen_combinations:
                seen_combinations.add(unique_key)
                
                # Assurer que tous les champs requis existent
                required_fields = [
                    'department', 'commune', 'prefixe', 'section', 'numero', 
                    'contenance', 'droit_reel', 'designation_parcelle', 
                    'nom', 'prenom', 'numero_majic', 'voie', 'post_code', 'city'
                ]
                
                for field in required_fields:
                    if field not in prop:
                        prop[field] = ''
                
                cleaned.append(prop)
        
        logger.info(f"üßπ Nettoyage: {len(properties)} ‚Üí {len(cleaned)} propri√©t√©s apr√®s d√©duplication")
        return cleaned

    def export_to_csv(self, all_properties: List[Dict], output_filename: str = "output.csv") -> None:
        """
        Exporte toutes les donn√©es vers un fichier CSV.
        
        Args:
            all_properties: Liste de toutes les propri√©t√©s
            output_filename: Nom du fichier de sortie
        """
        if not all_properties:
            logger.warning("Aucune donn√©e √† exporter")
            return
        
        # Cr√©er le DataFrame
        df = pd.DataFrame(all_properties)
        
        # Colonnes selon les sp√©cifications du client
        columns_order = [
            'department', 'commune', 'prefixe', 'section', 'numero', 'contenance', 
            'droit_reel', 'designation_parcelle', 'nom', 'prenom', 'numero_majic', 
            'voie', 'post_code', 'city', 'id', 'fichier_source'
        ]
        
        # Renommer les colonnes pour plus de clart√©
        column_mapping = {
            'department': 'D√©partement',
            'commune': 'Commune', 
            'prefixe': 'Pr√©fixe',
            'section': 'Section',
            'numero': 'Num√©ro',
            'contenance': 'Contenance',
            'droit_reel': 'Droit r√©el',
            'designation_parcelle': 'Designation Parcelle',
            'nom': 'Nom Propri',
            'prenom': 'Pr√©nom Propri',
            'numero_majic': 'N¬∞MAJIC',
            'voie': 'Voie',
            'post_code': 'CP',
            'city': 'Ville',
            'id': 'id',
            'fichier_source': 'Fichier source'
        }
        
        # R√©organiser et renommer
        df = df.reindex(columns=columns_order, fill_value='')
        df = df.rename(columns=column_mapping)
        
        # Exporter
        output_path = self.output_dir / output_filename
        df.to_csv(output_path, index=False, encoding='utf-8-sig')
        
        logger.info(f"üìä Donn√©es export√©es vers {output_path}")
        logger.info(f"üìà Total: {len(all_properties)} propri√©t√©(s) dans {len(df['Fichier source'].unique())} fichier(s)")
        
        return output_path

    def run(self) -> None:
        """
        Lance le processus complet d'extraction.
        """
        logger.info("üöÄ D√©marrage de l'extraction automatique")
        
        # Lister les fichiers PDF
        pdf_files = self.list_pdf_files()
        
        if not pdf_files:
            logger.warning("‚ùå Aucun fichier PDF trouv√© dans le dossier input/")
            return
        
        # Traiter tous les fichiers
        all_properties = []
        for pdf_file in pdf_files:
            properties = self.process_single_pdf(pdf_file)
            all_properties.extend(properties)
        
        # Exporter les r√©sultats
        if all_properties:
            self.export_to_csv(all_properties)
            logger.info("‚úÖ Extraction termin√©e avec succ√®s!")
        else:
            logger.warning("‚ùå Aucune donn√©e extraite")


def main():
    """Fonction principale."""
    # Charger les variables d'environnement
    load_dotenv()
    
    # Cr√©er et lancer l'extracteur
    extractor = PDFPropertyExtractor()
    extractor.run()


if __name__ == "__main__":
    main() 