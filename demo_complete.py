#!/usr/bin/env python3
"""
D√©monstration compl√®te du syst√®me d'extraction PDF.
Simule l'extraction avec des donn√©es fictives pour montrer le fonctionnement complet.
"""

import json
import pandas as pd
from pathlib import Path
from pdf_extractor import PDFPropertyExtractor
import logging

# Configuration du logging pour la d√©mo
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DemoExtractor(PDFPropertyExtractor):
    """Version d√©mo de l'extracteur qui simule les appels API."""
    
    def __init__(self):
        """Initialise l'extracteur d√©mo sans cl√© API."""
        # Initialisation sans appel au parent pour √©viter l'API OpenAI
        self.input_dir = Path("input")
        self.output_dir = Path("output")
        self.default_section = 'A'
        self.default_plan_number = 123
        
        # Cr√©er les dossiers s'ils n'existent pas
        self.input_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
        
        logger.info(f"Extracteur D√âMO initialis√© - Input: {self.input_dir}, Output: {self.output_dir}")

    def extract_info_with_gpt4o(self, image_data: bytes, filename: str) -> dict:
        """
        Simule l'extraction GPT-4o avec des donn√©es fictives r√©alistes.
        
        Args:
            image_data: Donn√©es de l'image (non utilis√©es en d√©mo)
            filename: Nom du fichier
            
        Returns:
            Dictionnaire avec des donn√©es fictives
        """
        logger.info(f"ü§ñ SIMULATION - Extraction GPT-4o pour {filename}")
        
        # Donn√©es fictives r√©alistes bas√©es sur le nom du fichier
        if "test" in filename.lower():
            fake_data = {
                "owners": [
                    {
                        "nom": "DUPONT",
                        "prenom": "JEAN",
                        "street_address": "1 RUE DES LILAS",
                        "post_code": "75010",
                        "city": "PARIS",
                        "numero_proprietaire": "P001",
                        "department": "75",
                        "commune": "001",
                        "droit_reel": "Propri√©taire"
                    },
                    {
                        "nom": "MARTIN",
                        "prenom": "MARIE",
                        "street_address": "15 AV DE LA PAIX",
                        "post_code": "69001",
                        "city": "LYON",
                        "numero_proprietaire": "P002",
                        "department": "69",
                        "commune": "001",
                        "droit_reel": "Indivision"
                    },
                    {
                        "nom": "BERNARD",
                        "prenom": "PIERRE",
                        "street_address": "8 PLACE DU MARCHE",
                        "post_code": "13001",
                        "city": "MARSEILLE",
                        "numero_proprietaire": "P003",
                        "department": "13",
                        "commune": "001",
                        "droit_reel": "Usufruitier"
                    }
                ]
            }
        else:
            # Donn√©es g√©n√©riques pour d'autres fichiers
            fake_data = {
                "owners": [
                    {
                        "nom": "EXEMPLE",
                        "prenom": "DEMO",
                        "street_address": "123 RUE DE LA DEMO",
                        "post_code": "00000",
                        "city": "VILLE DEMO",
                        "numero_proprietaire": "DEMO001",
                        "department": "00",
                        "commune": "000",
                        "droit_reel": "Propri√©taire"
                    }
                ]
            }
        
        logger.info(f"‚úÖ SIMULATION - {len(fake_data['owners'])} propri√©taire(s) 'extraits'")
        return fake_data

def create_additional_test_pdfs():
    """Cr√©e des PDFs de test suppl√©mentaires pour la d√©monstration."""
    from test_extractor import create_test_pdf
    
    input_dir = Path("input")
    
    # Cr√©er diff√©rents types de PDFs de test
    test_files = [
        "proprietaires_paris.pdf",
        "proprietaires_lyon.pdf", 
        "proprietaires_marseille.pdf"
    ]
    
    for pdf_name in test_files:
        pdf_path = input_dir / pdf_name
        if not pdf_path.exists():
            create_test_pdf(str(pdf_path))
            logger.info(f"üìÑ PDF de test cr√©√©: {pdf_name}")

def run_complete_demo():
    """Lance une d√©monstration compl√®te du syst√®me."""
    print("üé¨ D√âMONSTRATION COMPL√àTE - Extracteur PDF de Propri√©taires")
    print("=" * 60)
    
    # Cr√©er des PDFs de test suppl√©mentaires
    print("\nüìÑ Cr√©ation de PDFs de test...")
    create_additional_test_pdfs()
    
    # Cr√©er l'extracteur d√©mo
    print("\nü§ñ Initialisation de l'extracteur D√âMO...")
    extractor = DemoExtractor()
    
    # Lancer l'extraction
    print("\nüöÄ Lancement de l'extraction (SIMULATION)...")
    extractor.run()
    
    # Afficher les r√©sultats
    print("\nüìä Analyse des r√©sultats...")
    output_file = Path("output/output.csv")
    
    if output_file.exists():
        df = pd.read_csv(output_file)
        print(f"‚úÖ Fichier CSV cr√©√© avec {len(df)} entr√©e(s)")
        print(f"üìÅ Fichiers trait√©s: {df['Fichier source'].nunique()}")
        print(f"üè† Propri√©taires uniques: {len(df)}")
        
        print("\nüìã Aper√ßu des donn√©es extraites:")
        print("-" * 40)
        for idx, row in df.head().iterrows():
            print(f"üë§ {row['Nom']} {row['Pr√©nom']}")
            print(f"   üìç {row['Adresse']}, {row['CP']} {row['Ville']}")
            print(f"   üÜî ID Parcelle: {row['ID Parcelle']}")
            print(f"   üìÑ Source: {row['Fichier source']}")
            print()
        
        print("üíæ Fichier CSV complet disponible dans: output/output.csv")
    else:
        print("‚ùå Aucun fichier de sortie g√©n√©r√©")
    
    print("\nüéâ D√©monstration termin√©e!")
    print("\nüí° Pour utiliser avec de vrais PDFs:")
    print("   1. Ajoutez votre cl√© API OpenAI dans le fichier .env")
    print("   2. Placez vos PDFs dans le dossier input/")
    print("   3. Lancez: python pdf_extractor.py")

if __name__ == "__main__":
    run_complete_demo() 