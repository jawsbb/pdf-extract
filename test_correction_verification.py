#!/usr/bin/env python3
"""
Test de v√©rification de la correction de g√©n√©ration d'ID.
V√©rifie que les sections avec un seul caract√®re ont bien le z√©ro en PREMI√àRE position.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pdf_extractor import PDFPropertyExtractor

def test_correction_verification():
    """V√©rifie que la correction fonctionne selon les sp√©cifications client"""
    print("üîß V√âRIFICATION DE LA CORRECTION - G√âN√âRATION D'ID")
    print("V√©rification : le 0 doit √™tre en PREMI√àRE position pour les sections √† un caract√®re")
    print("=" * 80)
    
    extractor = PDFPropertyExtractor()
    
    # Cas de test selon les sp√©cifications client
    test_cases = [
        # (dept, commune, section, numero, prefixe, expected_id, description)
        ("25", "424", "A", "90", "", "254240000A0090", "Section A ‚Üí 0A"),
        ("51", "179", "B", "6", "", "511790000B0006", "Section B ‚Üí 0B"),  
        ("34", "049", "C", "123", "", "340490000C0123", "Section C ‚Üí 0C"),
        ("25", "227", "ZC", "5", "", "25227000ZC0005", "Section ZC ‚Üí ZC (d√©j√† 2 car.)"),
        ("48", "000", "ZD", "77", "", "48000000ZD0077", "Section ZD ‚Üí ZD (d√©j√† 2 car.)"),
        # Cas avec pr√©fixe
        ("25", "424", "A", "90", "302", "25424302A0090", "Avec pr√©fixe 302, Section A ‚Üí 0A"),
    ]
    
    print("üìã TESTS DE V√âRIFICATION :")
    all_passed = True
    
    for dept, commune, section, numero, prefixe, expected, description in test_cases:
        # Test avec le code corrig√©
        result = extractor.generate_unique_id(dept, commune, section, numero, prefixe)
        status = "‚úÖ OK" if result == expected else "‚ùå ERREUR"
        
        if result != expected:
            all_passed = False
        
        print(f"{status} {description}")
        print(f"      Input: Dept={dept}, Commune={commune}, Section={section}, Numero={numero}, Prefixe={prefixe}")
        print(f"      Attendu : {expected} (longueur: {len(expected)})")
        print(f"      Obtenu  : {result} (longueur: {len(result)})")
        
        if result != expected:
            print(f"      ‚ùå DIFF√âRENCE D√âTECT√âE!")
        
        # Analyser la composition
        if len(result) == 14:
            dept_part = result[0:2]
            comm_part = result[2:5] 
            pref_part = result[5:8]
            sect_part = result[8:10]
            num_part = result[10:14]
            print(f"      Composition: {dept_part}+{comm_part}+{pref_part}+{sect_part}+{num_part}")
            
            # V√©rifier sp√©cifiquement la section
            if len(section) == 1:
                expected_sect = f"0{section}"
                if sect_part == expected_sect:
                    print(f"      ‚úÖ Section correcte: '{section}' ‚Üí '{sect_part}'")
                else:
                    print(f"      ‚ùå Section incorrecte: '{section}' ‚Üí '{sect_part}' (attendu: '{expected_sect}')")
        print()
    
    # R√©sum√© final
    if all_passed:
        print("üéâ ‚úÖ CORRECTION R√âUSSIE ! Toutes les sections sont correctement format√©es.")
        print("‚úÖ Les z√©ros de compensation sont bien plac√©s AVANT les caract√®res.")
    else:
        print("‚ö†Ô∏è ‚ùå Des probl√®mes persistent dans la g√©n√©ration d'ID.")
    
    return all_passed

if __name__ == "__main__":
    test_correction_verification() 