#!/usr/bin/env python3
"""
Script de d√©marrage pour l'extracteur PDF en ligne
Permet de choisir entre diff√©rentes interfaces web
"""

import os
import sys
import subprocess
import webbrowser
import time
import threading
from pathlib import Path

def print_banner():
    """Afficher la banni√®re de d√©marrage"""
    print("=" * 60)
    print("üè† EXTRACTEUR DE PROPRI√âTAIRES PDF - VERSION WEB")
    print("=" * 60)
    print()

def check_dependencies():
    """V√©rifier les d√©pendances"""
    print("üîç V√©rification des d√©pendances...")
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    # V√©rifier les modules Python
    required_modules = ['streamlit', 'pandas', 'openai', 'pdf2image', 'PIL']
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"‚ùå Modules manquants: {', '.join(missing_modules)}")
        print("üí° Installez avec: pip install -r requirements_streamlit.txt")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def start_streamlit():
    """D√©marrer l'application Streamlit"""
    print("üöÄ D√©marrage de l'interface Streamlit...")
    print("üì± Interface moderne avec drag & drop")
    print("üé≠ Mode d√©mo disponible (sans API OpenAI)")
    print()
    
    # D√©marrer Streamlit
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "streamlit_app.py",
            "--server.port", "8501",
            "--server.address", "localhost",
            "--browser.gatherUsageStats", "false"
        ])
    except KeyboardInterrupt:
        print("\nüëã Application arr√™t√©e")

def start_react_dev():
    """D√©marrer l'application React en mode d√©veloppement"""
    print("üöÄ D√©marrage de l'interface React...")
    print("‚öõÔ∏è Interface ultra-moderne avec animations")
    print("üîÑ Rechargement automatique")
    print()
    
    frontend_path = Path("frontend")
    if not frontend_path.exists():
        print("‚ùå Dossier frontend non trouv√©")
        return
    
    # V√©rifier Node.js
    try:
        subprocess.run(["node", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js non install√©")
        print("üí° Installez Node.js depuis https://nodejs.org")
        return
    
    # Installer les d√©pendances si n√©cessaire
    if not (frontend_path / "node_modules").exists():
        print("üì¶ Installation des d√©pendances React...")
        subprocess.run(["npm", "install"], cwd=frontend_path)
    
    # D√©marrer React
    try:
        subprocess.run(["npm", "start"], cwd=frontend_path)
    except KeyboardInterrupt:
        print("\nüëã Application arr√™t√©e")

def start_backend():
    """D√©marrer le backend Flask"""
    print("üîß D√©marrage du backend Flask...")
    
    backend_path = Path("backend")
    if not backend_path.exists():
        print("‚ùå Dossier backend non trouv√©")
        return
    
    # D√©marrer Flask
    try:
        os.chdir(backend_path)
        subprocess.run([sys.executable, "app.py"])
    except KeyboardInterrupt:
        print("\nüëã Backend arr√™t√©")

def start_full_stack():
    """D√©marrer frontend + backend"""
    print("üöÄ D√©marrage de l'application compl√®te...")
    print("‚öõÔ∏è Frontend React + üîß Backend Flask")
    print()
    
    # D√©marrer le backend en arri√®re-plan
    backend_thread = threading.Thread(target=start_backend, daemon=True)
    backend_thread.start()
    
    # Attendre que le backend d√©marre
    time.sleep(3)
    
    # D√©marrer le frontend
    start_react_dev()

def open_browser(url, delay=3):
    """Ouvrir le navigateur apr√®s un d√©lai"""
    time.sleep(delay)
    webbrowser.open(url)

def main():
    """Menu principal"""
    print_banner()
    
    if not check_dependencies():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    print("\nüéØ Choisissez votre interface :")
    print("1. üì± Streamlit (Recommand√© - Simple et rapide)")
    print("2. ‚öõÔ∏è React + Flask (Avanc√© - Interface moderne)")
    print("3. üîß Backend Flask seulement")
    print("4. ‚ùì Aide et informations")
    print("0. üö™ Quitter")
    print()
    
    while True:
        choice = input("Votre choix (1-4, 0 pour quitter) : ").strip()
        
        if choice == "1":
            # Ouvrir le navigateur automatiquement
            browser_thread = threading.Thread(
                target=open_browser, 
                args=("http://localhost:8501",), 
                daemon=True
            )
            browser_thread.start()
            start_streamlit()
            break
            
        elif choice == "2":
            # Ouvrir le navigateur pour React
            browser_thread = threading.Thread(
                target=open_browser, 
                args=("http://localhost:3000",), 
                daemon=True
            )
            browser_thread.start()
            start_full_stack()
            break
            
        elif choice == "3":
            # Ouvrir le navigateur pour l'API
            browser_thread = threading.Thread(
                target=open_browser, 
                args=("http://localhost:5000/api/health",), 
                daemon=True
            )
            browser_thread.start()
            start_backend()
            break
            
        elif choice == "4":
            print("\nüìö INFORMATIONS :")
            print("‚Ä¢ Streamlit : Interface simple, id√©ale pour d√©buter")
            print("‚Ä¢ React : Interface moderne avec animations")
            print("‚Ä¢ Backend : API REST pour int√©grations")
            print()
            print("üîë Configuration OpenAI :")
            print("‚Ä¢ Cr√©ez un fichier .env avec OPENAI_API_KEY=votre_cl√©")
            print("‚Ä¢ Ou utilisez le mode d√©mo dans Streamlit")
            print()
            print("üåê URLs apr√®s d√©marrage :")
            print("‚Ä¢ Streamlit : http://localhost:8501")
            print("‚Ä¢ React : http://localhost:3000")
            print("‚Ä¢ API : http://localhost:5000")
            print()
            
        elif choice == "0":
            print("üëã Au revoir !")
            break
            
        else:
            print("‚ùå Choix invalide, essayez encore")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Application interrompue")
    except Exception as e:
        print(f"\n‚ùå Erreur : {e}")
        input("Appuyez sur Entr√©e pour quitter...") 