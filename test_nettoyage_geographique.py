#!/usr/bin/env python3
"""
Test du nettoyage g√©ographique - Fonction clean_inconsistent_location_data
"""
import logging
from pdf_extractor import PDFPropertyExtractor

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_clean_inconsistent_location_data():
    """Test de la fonction de nettoyage g√©ographique"""
    
    # Cr√©er une instance de l'extracteur
    extractor = PDFPropertyExtractor()
    
    # Donn√©es de test avec incoh√©rences g√©ographiques
    test_properties = [
        {
            'nom': 'MARTIN',
            'prenom': 'PIERRE',
            'department': '21',
            'commune': '026',
            'section': 'A',
            'numero': '123'
        },
        {
            'nom': 'DUPONT',
            'prenom': 'MARIE',
            'department': '21',
            'commune': '026',
            'section': 'B',
            'numero': '456'
        },
        {
            'nom': 'BERNARD',
            'prenom': 'PAUL',
            'department': '68',  # D√©partement incoh√©rent
            'commune': '057',    # Commune incoh√©rente
            'section': 'C',
            'numero': '789'
        },
        {
            'nom': 'LECLERC',
            'prenom': 'SOPHIE',
            'department': '21',
            'commune': '026',
            'section': 'D',
            'numero': '101'
        }
    ]
    
    print("üß™ Test du nettoyage g√©ographique")
    print("="*60)
    
    print("\nüìã Donn√©es avant nettoyage :")
    for i, prop in enumerate(test_properties):
        print(f"  {i+1}. {prop['nom']} {prop['prenom']} - {prop['department']}/{prop['commune']}")
    
    # Test de la fonction
    cleaned_properties = extractor.clean_inconsistent_location_data(test_properties, "test.pdf")
    
    print("\nüìã Donn√©es apr√®s nettoyage :")
    for i, prop in enumerate(cleaned_properties):
        print(f"  {i+1}. {prop['nom']} {prop['prenom']} - {prop['department']}/{prop['commune']}")
    
    # V√©rification
    print("\nüîç V√©rification :")
    print(f"  - Propri√©t√©s avant : {len(test_properties)}")
    print(f"  - Propri√©t√©s apr√®s : {len(cleaned_properties)}")
    
    # V√©rifier que seules les propri√©t√©s avec 21/026 sont gard√©es
    valid_count = 0
    for prop in cleaned_properties:
        if prop['department'] == '21' and prop['commune'] == '026':
            valid_count += 1
    
    print(f"  - Propri√©t√©s avec localisation coh√©rente : {valid_count}")
    
    if valid_count == len(cleaned_properties):
        print("‚úÖ Test r√©ussi : toutes les propri√©t√©s ont la localisation majoritaire")
    else:
        print("‚ùå Test √©chou√© : des propri√©t√©s incoh√©rentes subsistent")
    
    return len(cleaned_properties) == 3  # Doit garder 3 propri√©t√©s sur 4

def test_properties_without_location():
    """Test avec propri√©t√©s sans donn√©es g√©ographiques"""
    
    extractor = PDFPropertyExtractor()
    
    test_properties = [
        {
            'nom': 'MARTIN',
            'prenom': 'PIERRE',
            'section': 'A',
            'numero': '123'
        },
        {
            'nom': 'DUPONT',
            'prenom': 'MARIE',
            'department': '',  # Vide
            'commune': '',     # Vide
            'section': 'B',
            'numero': '456'
        }
    ]
    
    print("\nüß™ Test avec propri√©t√©s sans donn√©es g√©ographiques")
    print("="*60)
    
    cleaned_properties = extractor.clean_inconsistent_location_data(test_properties, "test_vide.pdf")
    
    print(f"  - Propri√©t√©s avant : {len(test_properties)}")
    print(f"  - Propri√©t√©s apr√®s : {len(cleaned_properties)}")
    
    # Doit garder toutes les propri√©t√©s car pas de donn√©es g√©ographiques
    if len(cleaned_properties) == len(test_properties):
        print("‚úÖ Test r√©ussi : propri√©t√©s sans donn√©es g√©ographiques conserv√©es")
        return True
    else:
        print("‚ùå Test √©chou√© : propri√©t√©s supprim√©es √† tort")
        return False

def test_coherent_location():
    """Test avec localisation coh√©rente"""
    
    extractor = PDFPropertyExtractor()
    
    test_properties = [
        {
            'nom': 'MARTIN',
            'prenom': 'PIERRE',
            'department': '21',
            'commune': '026',
            'section': 'A',
            'numero': '123'
        },
        {
            'nom': 'DUPONT',
            'prenom': 'MARIE',
            'department': '21',
            'commune': '026',
            'section': 'B',
            'numero': '456'
        }
    ]
    
    print("\nüß™ Test avec localisation coh√©rente")
    print("="*60)
    
    cleaned_properties = extractor.clean_inconsistent_location_data(test_properties, "test_coherent.pdf")
    
    print(f"  - Propri√©t√©s avant : {len(test_properties)}")
    print(f"  - Propri√©t√©s apr√®s : {len(cleaned_properties)}")
    
    # Doit garder toutes les propri√©t√©s
    if len(cleaned_properties) == len(test_properties):
        print("‚úÖ Test r√©ussi : localisation coh√©rente, toutes les propri√©t√©s conserv√©es")
        return True
    else:
        print("‚ùå Test √©chou√© : propri√©t√©s supprim√©es √† tort")
        return False

if __name__ == "__main__":
    print("üß™ TESTS DE NETTOYAGE G√âOGRAPHIQUE")
    print("="*80)
    
    # Ex√©cuter les tests
    test1 = test_clean_inconsistent_location_data()
    test2 = test_properties_without_location()
    test3 = test_coherent_location()
    
    print("\nüìä R√âSULTATS DES TESTS")
    print("="*80)
    print(f"  - Test incoh√©rences g√©ographiques : {'‚úÖ R√âUSSI' if test1 else '‚ùå √âCHOU√â'}")
    print(f"  - Test sans donn√©es g√©ographiques : {'‚úÖ R√âUSSI' if test2 else '‚ùå √âCHOU√â'}")
    print(f"  - Test localisation coh√©rente : {'‚úÖ R√âUSSI' if test3 else '‚ùå √âCHOU√â'}")
    
    if all([test1, test2, test3]):
        print("\nüéâ TOUS LES TESTS R√âUSSIS ! La fonction de nettoyage g√©ographique fonctionne correctement.")
    else:
        print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â ! V√©rifiez le code.") 