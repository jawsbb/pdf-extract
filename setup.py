#!/usr/bin/env python3
"""
Script d'installation et de configuration automatique.
"""

import os
import sys
import subprocess
from pathlib import Path

def install_dependencies():
    """Installe les d√©pendances Python."""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False

def create_env_file():
    """Cr√©e le fichier .env s'il n'existe pas."""
    env_file = Path(".env")
    example_file = Path("config.env.example")
    
    if env_file.exists():
        print("‚úÖ Le fichier .env existe d√©j√†")
        return True
    
    if example_file.exists():
        # Copier le fichier d'exemple
        with open(example_file, 'r') as src, open(env_file, 'w') as dst:
            dst.write(src.read())
        print("‚úÖ Fichier .env cr√©√© √† partir de l'exemple")
        print("‚ö†Ô∏è  N'oubliez pas d'ajouter votre cl√© API OpenAI dans le fichier .env")
        return True
    else:
        # Cr√©er un fichier .env basique
        with open(env_file, 'w') as f:
            f.write("# Configuration OpenAI\n")
            f.write("OPENAI_API_KEY=your_openai_api_key_here\n\n")
            f.write("# Configuration optionnelle\n")
            f.write("DEFAULT_SECTION=A\n")
            f.write("DEFAULT_PLAN_NUMBER=123\n")
        print("‚úÖ Fichier .env cr√©√©")
        print("‚ö†Ô∏è  N'oubliez pas d'ajouter votre cl√© API OpenAI dans le fichier .env")
        return True

def create_directories():
    """Cr√©e les dossiers n√©cessaires."""
    directories = ["input", "output"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Dossier {directory}/ cr√©√©")

def run_test():
    """Lance le test du syst√®me."""
    print("\nüß™ Lancement du test du syst√®me...")
    try:
        subprocess.check_call([sys.executable, "test_extractor.py"])
        print("‚úÖ Test termin√© avec succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def main():
    """Fonction principale d'installation."""
    print("üöÄ Installation de l'Extracteur PDF de Propri√©taires")
    print("=" * 50)
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur requis")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
    
    # Cr√©er les dossiers
    print("\nüìÅ Cr√©ation des dossiers...")
    create_directories()
    
    # Cr√©er le fichier .env
    print("\n‚öôÔ∏è Configuration...")
    create_env_file()
    
    # Installer les d√©pendances
    print("\nüì¶ Installation des d√©pendances...")
    if not install_dependencies():
        print("‚ùå √âchec de l'installation")
        sys.exit(1)
    
    # Lancer le test
    print("\nüß™ Test du syst√®me...")
    if run_test():
        print("\nüéâ Installation termin√©e avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. √âditez le fichier .env et ajoutez votre cl√© API OpenAI")
        print("2. Placez vos fichiers PDF dans le dossier input/")
        print("3. Lancez: python pdf_extractor.py")
    else:
        print("\n‚ö†Ô∏è Installation termin√©e mais le test a √©chou√©")
        print("V√©rifiez les d√©pendances et r√©essayez")

if __name__ == "__main__":
    main() 