#!/usr/bin/env python3
"""
Test pour valider la fonction de nettoyage g√©ographique appliqu√©e.
"""

import sys
from pathlib import Path

# Import du module principal
try:
    from pdf_extractor import PDFPropertyExtractor
    print("OK Import reussi de pdf_extractor")
except ImportError as e:
    print(f"ERREUR d'import: {e}")
    sys.exit(1)

def test_nettoyage_geographique():
    """Test de la fonction clean_inconsistent_location_data avec cas r√©els"""
    
    print("\nTEST: Nettoyage des incoh√©rences g√©ographiques")
    print("=" * 50)
    
    extractor = PDFPropertyExtractor()
    
    # Simuler les donn√©es probl√©matiques de l'utilisateur
    test_properties = [
        # 5 premi√®res lignes - r√©f√©rence: 25-424 (majoritaire)
        {
            'departement': '25',
            'commune': '424', 
            'nom': 'COM COMMUNE DE HAUTEPIERRE LE CHATELET',
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'LES COMBES'
        },
        {
            'departement': '25',
            'commune': '424',
            'nom': 'COM COMMUNE DE HAUTEPIERRE LE CHATELET', 
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'LES COMBES'
        },
        {
            'departement': '25',
            'commune': '424',
            'nom': 'COM COMMUNE DE HAUTEPIERRE LE CHATELET',
            'fichier_source': 'ZY6.pdf', 
            'designation_parcelle': 'RIGOLE'
        },
        {
            'departement': '25',
            'commune': '424',
            'nom': 'COM COMMUNE DE HAUTEPIERRE LE CHATELET',
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'RIGOLE'
        },
        {
            'departement': '25',
            'commune': '424',
            'nom': 'COM COMMUNE DE HAUTEPIERRE LE CHATELET',
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'LES COMBES'
        },
        
        # Lignes incoh√©rentes qui doivent √™tre supprim√©es
        {
            'departement': '76',  # Diff√©rent !
            'commune': '302',     # Diff√©rent !
            'nom': 'ROUCHE',
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'LA LECHIERE'
        },
        {
            'departement': '76',
            'commune': '302', 
            'nom': 'ROUCHE',
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'TETE DE COMTOIS'
        },
        {
            'departement': '76',
            'commune': '302',
            'nom': 'ROUCHE', 
            'fichier_source': 'ZY6.pdf',
            'designation_parcelle': 'CHAMPS DE VAYE'
        }
    ]
    
    print(f"Donn√©es d'entr√©e: {len(test_properties)} lignes")
    print("  - Lignes 1-5: d√©partement=25, commune=424 (r√©f√©rence)")
    print("  - Lignes 6-8: d√©partement=76, commune=302 (incoh√©rentes)")
    
    # Test de la fonction
    try:
        result = extractor.clean_inconsistent_location_data(test_properties, 'test.pdf')
        
        print(f"\nR√©sultat: {len(result)} lignes conserv√©es")
        
        # V√©rifications
        if len(result) == 5:
            print("‚úÖ SUCC√àS: Bon nombre de lignes conserv√©es (5/8)")
        else:
            print(f"‚ùå √âCHEC: {len(result)} lignes conserv√©es au lieu de 5")
            return False
            
        # V√©rifier que seules les lignes coh√©rentes sont conserv√©es
        all_25_424 = all(
            prop.get('departement') == '25' and prop.get('commune') == '424' 
            for prop in result
        )
        
        if all_25_424:
            print("‚úÖ SUCC√àS: Toutes les lignes conserv√©es ont d√©partement=25, commune=424")
        else:
            print("‚ùå √âCHEC: Des lignes incoh√©rentes ont √©t√© conserv√©es")
            return False
            
        # V√©rifier les noms conserv√©s
        noms_conserves = [prop.get('nom', '') for prop in result]
        communes_uniquement = all('COM COMMUNE' in nom for nom in noms_conserves)
        
        if communes_uniquement:
            print("‚úÖ SUCC√àS: Seules les lignes de la commune ont √©t√© conserv√©es")
        else:
            print("‚ùå √âCHEC: Des propri√©taires incoh√©rents ont √©t√© conserv√©s")
            return False
            
        print("\nüéØ R√âSULTAT FINAL: Nettoyage g√©ographique fonctionnel")
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du test: {e}")
        return False

if __name__ == "__main__":
    success = test_nettoyage_geographique()
    print(f"\nStatut final: {'SUCCESS' if success else 'FAILED'}") 