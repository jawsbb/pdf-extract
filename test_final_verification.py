#!/usr/bin/env python3
"""
Test final de v√©rification de la correction de g√©n√©ration d'ID.
V√©rifie tous les cas selon les sp√©cifications exactes du client.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pdf_extractor import PDFPropertyExtractor

def test_final_verification():
    """Test final selon les sp√©cifications exactes du client"""
    print("üéØ TEST FINAL - G√âN√âRATION D'ID SELON SP√âCIFICATIONS CLIENT")
    print("Format : D√âPARTEMENT(2) + COMMUNE(3) + PR√âFIXE(3) + SECTION(2) + NUM√âRO(4) = 14 caract√®res")
    print("R√àGLE : Z√©ros de compensation AVANT les caract√®res renseign√©s")
    print("=" * 90)
    
    extractor = PDFPropertyExtractor()
    
    # Cas de test exhaustifs selon les sp√©cifications client
    test_cases = [
        # (dept, commune, prefixe, section, numero, expected_id, description)
        
        # üîß CAS PROBL√âMATIQUES RAPPORT√âS PAR LE CLIENT
        ("25", "424", "", "A", "90", "254240000A0090", "Section A ‚Üí 0A (CORRECTION PRINCIPALE)"),
        ("51", "179", "", "B", "6", "511790000B0006", "Section B ‚Üí 0B"),  
        ("34", "049", "", "C", "123", "340490000C0123", "Section C ‚Üí 0C"),
        
        # ‚úÖ CAS D√âJ√Ä CORRECTS (2 caract√®res)
        ("25", "227", "", "ZC", "5", "25227000ZC0005", "Section ZC ‚Üí ZC (d√©j√† 2 caract√®res)"),
        ("48", "000", "", "ZD", "77", "48000000ZD0077", "Section ZD ‚Üí ZD (d√©j√† 2 caract√®res)"),
        
        # üî¢ CAS AVEC PR√âFIXES
        ("25", "424", "302", "A", "90", "25424302A0090", "Avec pr√©fixe 302, Section A ‚Üí 0A"),
        ("51", "179", "001", "ZY", "6", "51179001ZY0006", "Avec pr√©fixe 001, Section ZY ‚Üí ZY"),
        
        # üìè CAS LIMITES
        ("01", "001", "000", "A", "1", "010010000A0001", "Valeurs minimales"),
        ("99", "999", "999", "ZZ", "9999", "99999999ZZ9999", "Valeurs maximales"),
        
        # üîÑ CAS DE D√âPASSEMENT
        ("123", "4567", "890", "ABC", "12345", "23567890BC2345", "Troncature si d√©passement"),
    ]
    
    print("üìã TESTS EXHAUSTIFS :")
    all_passed = True
    
    for dept, commune, prefixe, section, numero, expected, description in test_cases:
        # Test avec le code corrig√©
        result = extractor.generate_unique_id(dept, commune, section, numero, prefixe)
        status = "‚úÖ OK" if result == expected else "‚ùå ERREUR"
        
        if result != expected:
            all_passed = False
        
        print(f"{status} {description}")
        print(f"      Input: Dept={dept}, Commune={commune}, Pr√©fixe={prefixe}, Section={section}, Numero={numero}")
        print(f"      Attendu : {expected} (longueur: {len(expected)})")
        print(f"      Obtenu  : {result} (longueur: {len(result)})")
        
        if result != expected:
            print(f"      ‚ùå DIFF√âRENCE D√âTECT√âE!")
        
        # Analyser la composition d√©taill√©e
        if len(result) == 14:
            dept_part = result[0:2]
            comm_part = result[2:5] 
            pref_part = result[5:8]
            sect_part = result[8:10]
            num_part = result[10:14]
            print(f"      Composition: {dept_part}+{comm_part}+{pref_part}+{sect_part}+{num_part}")
            
            # V√©rifications sp√©cifiques
            checks = []
            if len(section) == 1:
                expected_sect = f"0{section}"
                if sect_part == expected_sect:
                    checks.append(f"‚úÖ Section '{section}' ‚Üí '{sect_part}' (z√©ro AVANT)")
                else:
                    checks.append(f"‚ùå Section '{section}' ‚Üí '{sect_part}' (attendu: '{expected_sect}')")
            
            if len(prefixe or "000") <= 3:
                expected_pref = (prefixe or "000").zfill(3)
                if pref_part == expected_pref:
                    checks.append(f"‚úÖ Pr√©fixe '{prefixe}' ‚Üí '{pref_part}'")
                else:
                    checks.append(f"‚ùå Pr√©fixe '{prefixe}' ‚Üí '{pref_part}' (attendu: '{expected_pref}')")
            
            for check in checks:
                print(f"      {check}")
        print()
    
    # üéØ V√âRIFICATION SP√âCIALE : Cas rapport√©s par le client
    print("üîç V√âRIFICATION SP√âCIALE - CAS RAPPORT√âS PAR LE CLIENT :")
    client_cases = [
        ("25", "424", "", "A", "90", "Section A doit donner 0A (pas A0)"),
        ("51", "179", "", "B", "6", "Section B doit donner 0B (pas B0)"),
    ]
    
    for dept, commune, prefixe, section, numero, description in client_cases:
        result = extractor.generate_unique_id(dept, commune, section, numero, prefixe)
        sect_part = result[8:10]  # Position de la section dans l'ID
        
        if section == "A" and sect_part == "0A":
            print(f"      ‚úÖ {description} ‚Üí CORRIG√â !")
        elif section == "B" and sect_part == "0B":
            print(f"      ‚úÖ {description} ‚Üí CORRIG√â !")
        else:
            print(f"      ‚ùå {description} ‚Üí PROBL√àME PERSISTANT")
            all_passed = False
    
    # R√©sum√© final
    print("\n" + "=" * 90)
    if all_passed:
        print("üéâ ‚úÖ CORRECTION PARFAITEMENT R√âUSSIE !")
        print("‚úÖ Toutes les sections avec un seul caract√®re ont le z√©ro en PREMI√àRE position")
        print("‚úÖ Le format DEPT(2)+COMM(3)+PR√âFIXE(3)+SECTION(2)+NUM√âRO(4) = 14 caract√®res est respect√©")
        print("‚úÖ Le probl√®me rapport√© par le client est R√âSOLU")
    else:
        print("‚ö†Ô∏è ‚ùå Des probl√®mes persistent - V√©rification n√©cessaire")
    
    return all_passed

if __name__ == "__main__":
    test_final_verification() 